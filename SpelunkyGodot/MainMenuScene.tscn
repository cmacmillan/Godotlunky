[gd_scene load_steps=87 format=2]

[ext_resource path="res://CaveTex/sBrick_0.png" type="Texture" id=1]
[ext_resource path="res://GodolunkyLogo.png" type="Texture" id=2]
[ext_resource path="res://CaveTex/sTikiTorch_3.png" type="Texture" id=3]
[ext_resource path="res://CaveTex/sTikiTorch_1.png" type="Texture" id=4]
[ext_resource path="res://CaveTex/sTikiTorch_2.png" type="Texture" id=5]
[ext_resource path="res://CaveTex/sTikiTorch_0.png" type="Texture" id=6]
[ext_resource path="res://CaveTex/sTikiTorch_4.png" type="Texture" id=7]
[ext_resource path="res://noise.png" type="Texture" id=8]
[ext_resource path="res://MainMenuLights.gd" type="Script" id=9]
[ext_resource path="res://GodotLogoGlow.png" type="Texture" id=10]
[ext_resource path="res://GithubPressedd.png" type="Texture" id=11]
[ext_resource path="res://GithubHovered.png" type="Texture" id=12]
[ext_resource path="res://Github.png" type="Texture" id=13]
[ext_resource path="res://Itch.png" type="Texture" id=14]
[ext_resource path="res://ItchHovered.png" type="Texture" id=15]
[ext_resource path="res://ItchPressed.png" type="Texture" id=16]
[ext_resource path="res://OpenLinkOnButtonPress.gd" type="Script" id=17]
[ext_resource path="res://StartButton.png" type="Texture" id=18]
[ext_resource path="res://MainMenuFont.tres" type="DynamicFont" id=19]
[ext_resource path="res://StartButtonHovered.png" type="Texture" id=20]
[ext_resource path="res://StartButtonPressed.png" type="Texture" id=21]
[ext_resource path="res://SFX/ice_crack3.wav" type="AudioStream" id=22]
[ext_resource path="res://SFX/ice_crack2.wav" type="AudioStream" id=23]
[ext_resource path="res://StartButton.gd" type="Script" id=24]
[ext_resource path="res://SFX/fadein.wav" type="AudioStream" id=25]
[ext_resource path="res://SFX/fadeout.wav" type="AudioStream" id=26]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.1, 0.1, 0.1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.2

[sub_resource type="VisualShader" id=5]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4;



void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Scalar:7
	float n_out7p0 = 0.200000;

// VectorOp:6
	vec3 n_out6p0 = n_out5p0 * vec3(n_out7p0);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out6p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 50, 286 )
mode = 1
flags/light_only = false
nodes/fragment/4/node = SubResource( 1 )
nodes/fragment/4/position = Vector2( -20, 120 )
nodes/fragment/5/node = SubResource( 2 )
nodes/fragment/5/position = Vector2( -540, 80 )
nodes/fragment/6/node = SubResource( 3 )
nodes/fragment/6/position = Vector2( -280, 180 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( -540, 280 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 5, 0, 6, 0, 6, 0, 4, 0, 7, 0, 6, 1 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="SpriteFrames" id=41]
animations = [ {
"frames": [ ExtResource( 6 ), ExtResource( 4 ), ExtResource( 5 ), ExtResource( 3 ), ExtResource( 7 ) ],
"loop": true,
"name": "Flicker",
"speed": 5.0
} ]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 2000.0 ]

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 8 )

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 3000.0, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarInterp" id=15]
default_input_values = [ 0, 0.3, 1, 0.0, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=17]
uniform_name = "LightPos1"

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 7

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, -1000.0 ]
operator = 7

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=21]
uniform_name = "LightPos2"

[sub_resource type="VisualShaderNodeVectorDistance" id=22]

[sub_resource type="VisualShaderNodeScalarOp" id=23]
default_input_values = [ 0, 200.0, 1, 200.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorOp" id=25]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=26]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=27]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeVectorDistance" id=28]

[sub_resource type="VisualShaderNodeScalarOp" id=29]
default_input_values = [ 0, 0.0, 1, 2000.0 ]

[sub_resource type="VisualShaderNodeTexture" id=30]
texture = ExtResource( 8 )

[sub_resource type="VisualShaderNodeScalarOp" id=31]
default_input_values = [ 0, 3000.0, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarInterp" id=32]
default_input_values = [ 0, 0.3, 1, 0.0, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=33]
default_input_values = [ 0, 0.0, 1, 0.45 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=34]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 7

[sub_resource type="VisualShaderNodeInput" id=35]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=42]
operator = 7

[sub_resource type="VisualShaderNodeTexture" id=43]
texture = ExtResource( 10 )

[sub_resource type="VisualShaderNodeScalarOp" id=36]
default_input_values = [ 0, 200.0, 1, 200.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarInterp" id=44]
default_input_values = [ 0, 1.0, 1, -2.0, 2, 0.5 ]

[sub_resource type="VisualShaderNodeVectorOp" id=45]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, -15, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=46]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1000, 1000, 0 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=47]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( -0.15, 3.15, 0 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=48]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=49]
constant = 0.325

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorOp" id=38]
operator = 2

[sub_resource type="VisualShader" id=39]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_22;
uniform vec3 LightPos1;
uniform sampler2D tex_frg_41;
uniform vec3 LightPos2;



void vertex() {
// Output:0

}

void fragment() {
// Color:26
	vec3 n_out26p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out26p1 = 1.000000;

// Input:23
	float n_out23p0 = TIME;

// ScalarOp:29
	float n_in29p1 = 0.50000;
	float n_out29p0 = n_out23p0 * n_in29p1;

// Texture:22
	vec4 tex_frg_22_read = texture(tex_frg_22, vec3(n_out29p0).xy);
	vec3 n_out22p0 = tex_frg_22_read.rgb;
	float n_out22p1 = tex_frg_22_read.a;

// ScalarOp:25
	float n_in25p0 = 3000.00000;
	float n_out25p0 = n_in25p0 * dot(n_out22p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:21
	float n_in21p1 = 2000.00000;
	float n_out21p0 = n_out25p0 + n_in21p1;

// VectorUniform:3
	vec3 n_out3p0 = LightPos1;

// Input:2
	vec3 n_out2p0 = vec3(SCREEN_UV, 0.0);

// Input:7
	vec3 n_out7p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorOp:10
	vec3 n_in10p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out10p0 = n_in10p0 / n_out7p0;

// VectorOp:8
	vec3 n_out8p0 = n_out2p0 * n_out10p0;

// Distance:4
	float n_out4p0 = distance(n_out3p0, n_out8p0);

// ScalarOp:11
	float n_in11p1 = 2.00000;
	float n_out11p0 = pow(n_out4p0, n_in11p1);

// ScalarOp:5
	float n_out5p0 = n_out21p0 / n_out11p0;

// ScalarOp:30
	float n_in30p1 = 10.00000;
	float n_out30p0 = min(n_out5p0, n_in30p1);

// ScalarMix:27
	float n_in27p0 = 0.30000;
	float n_in27p1 = 0.00000;
	float n_out27p0 = mix(n_in27p0, n_in27p1, n_out30p0);

// Input:47
	float n_out47p0 = TIME;

// ScalarOp:45
	float n_in45p1 = 0.45000;
	float n_out45p0 = n_out47p0 * n_in45p1;

// Texture:41
	vec4 tex_frg_41_read = texture(tex_frg_41, vec3(n_out45p0).xy);
	vec3 n_out41p0 = tex_frg_41_read.rgb;
	float n_out41p1 = tex_frg_41_read.a;

// ScalarOp:43
	float n_in43p0 = 3000.00000;
	float n_out43p0 = n_in43p0 * dot(n_out41p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:40
	float n_in40p1 = 2000.00000;
	float n_out40p0 = n_out43p0 + n_in40p1;

// VectorUniform:33
	vec3 n_out33p0 = LightPos2;

// Input:32
	vec3 n_out32p0 = vec3(SCREEN_UV, 0.0);

// Input:36
	vec3 n_out36p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorOp:38
	vec3 n_in38p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out38p0 = n_in38p0 / n_out36p0;

// VectorOp:37
	vec3 n_out37p0 = n_out32p0 * n_out38p0;

// Distance:34
	float n_out34p0 = distance(n_out33p0, n_out37p0);

// ScalarOp:39
	float n_in39p1 = 2.00000;
	float n_out39p0 = pow(n_out34p0, n_in39p1);

// ScalarOp:35
	float n_out35p0 = n_out40p0 / n_out39p0;

// ScalarOp:46
	float n_in46p1 = 10.00000;
	float n_out46p0 = min(n_out35p0, n_in46p1);

// ScalarMix:44
	float n_in44p0 = 0.30000;
	float n_in44p1 = 0.00000;
	float n_out44p0 = mix(n_in44p0, n_in44p1, n_out46p0);

// ScalarOp:31
	float n_out31p0 = min(n_out27p0, n_out44p0);

// Output:0
	COLOR.rgb = n_out26p0;
	COLOR.a = n_out31p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 50, 286 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1240, 640 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -760, 160 )
nodes/fragment/3/node = SubResource( 17 )
nodes/fragment/3/position = Vector2( -420, 80 )
nodes/fragment/4/node = SubResource( 28 )
nodes/fragment/4/position = Vector2( -120, 140 )
nodes/fragment/5/node = SubResource( 36 )
nodes/fragment/5/position = Vector2( 280, 80 )
nodes/fragment/7/node = SubResource( 37 )
nodes/fragment/7/position = Vector2( -1000, 280 )
nodes/fragment/8/node = SubResource( 38 )
nodes/fragment/8/position = Vector2( -480, 160 )
nodes/fragment/10/node = SubResource( 7 )
nodes/fragment/10/position = Vector2( -700, 240 )
nodes/fragment/11/node = SubResource( 8 )
nodes/fragment/11/position = Vector2( 53, 116 )
nodes/fragment/21/node = SubResource( 10 )
nodes/fragment/21/position = Vector2( 100, -80 )
nodes/fragment/22/node = SubResource( 11 )
nodes/fragment/22/position = Vector2( -680, -180 )
nodes/fragment/23/node = SubResource( 12 )
nodes/fragment/23/position = Vector2( -1100, -40 )
nodes/fragment/25/node = SubResource( 13 )
nodes/fragment/25/position = Vector2( -200, -120 )
nodes/fragment/26/node = SubResource( 14 )
nodes/fragment/26/position = Vector2( 1000, 440 )
nodes/fragment/27/node = SubResource( 15 )
nodes/fragment/27/position = Vector2( 640, 180 )
nodes/fragment/29/node = SubResource( 16 )
nodes/fragment/29/position = Vector2( -860, -20 )
nodes/fragment/30/node = SubResource( 18 )
nodes/fragment/30/position = Vector2( 440, 160 )
nodes/fragment/31/node = SubResource( 19 )
nodes/fragment/31/position = Vector2( 683, 394 )
nodes/fragment/32/node = SubResource( 20 )
nodes/fragment/32/position = Vector2( -680.161, 762.197 )
nodes/fragment/33/node = SubResource( 21 )
nodes/fragment/33/position = Vector2( -340.161, 682.197 )
nodes/fragment/34/node = SubResource( 22 )
nodes/fragment/34/position = Vector2( -40.1613, 742.197 )
nodes/fragment/35/node = SubResource( 23 )
nodes/fragment/35/position = Vector2( 359.839, 682.197 )
nodes/fragment/36/node = SubResource( 24 )
nodes/fragment/36/position = Vector2( -920.161, 882.197 )
nodes/fragment/37/node = SubResource( 25 )
nodes/fragment/37/position = Vector2( -400.161, 762.197 )
nodes/fragment/38/node = SubResource( 26 )
nodes/fragment/38/position = Vector2( -620.161, 842.197 )
nodes/fragment/39/node = SubResource( 27 )
nodes/fragment/39/position = Vector2( 132.839, 718.197 )
nodes/fragment/40/node = SubResource( 29 )
nodes/fragment/40/position = Vector2( 179.839, 522.197 )
nodes/fragment/41/node = SubResource( 30 )
nodes/fragment/41/position = Vector2( -600.161, 422.197 )
nodes/fragment/43/node = SubResource( 31 )
nodes/fragment/43/position = Vector2( -120.161, 482.197 )
nodes/fragment/44/node = SubResource( 32 )
nodes/fragment/44/position = Vector2( 700, 760 )
nodes/fragment/45/node = SubResource( 33 )
nodes/fragment/45/position = Vector2( -860, 560 )
nodes/fragment/46/node = SubResource( 34 )
nodes/fragment/46/position = Vector2( 519.839, 762.197 )
nodes/fragment/47/node = SubResource( 35 )
nodes/fragment/47/position = Vector2( -1140, 560 )
nodes/fragment/48/node = SubResource( 42 )
nodes/fragment/48/position = Vector2( 1120, 840 )
nodes/fragment/49/node = SubResource( 43 )
nodes/fragment/49/position = Vector2( 560, 960 )
nodes/fragment/51/node = SubResource( 44 )
nodes/fragment/51/position = Vector2( 940, 940 )
nodes/fragment/52/node = SubResource( 45 )
nodes/fragment/52/position = Vector2( -80, 1000 )
nodes/fragment/53/node = SubResource( 46 )
nodes/fragment/53/position = Vector2( -320, 940 )
nodes/fragment/54/node = SubResource( 47 )
nodes/fragment/54/position = Vector2( 320, 1100 )
nodes/fragment/55/node = SubResource( 48 )
nodes/fragment/55/position = Vector2( 100, 1100 )
nodes/fragment/56/node = SubResource( 49 )
nodes/fragment/56/position = Vector2( -100, 1160 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 8, 0, 8, 0, 4, 1, 7, 0, 10, 1, 10, 0, 8, 1, 4, 0, 11, 0, 11, 0, 5, 1, 21, 0, 5, 0, 22, 0, 25, 1, 25, 0, 21, 0, 23, 0, 29, 0, 29, 0, 22, 0, 5, 0, 30, 0, 30, 0, 27, 2, 27, 0, 31, 0, 33, 0, 34, 0, 32, 0, 37, 0, 37, 0, 34, 1, 36, 0, 38, 1, 38, 0, 37, 1, 34, 0, 39, 0, 39, 0, 35, 1, 40, 0, 35, 0, 41, 0, 43, 1, 43, 0, 40, 0, 35, 0, 46, 0, 46, 0, 44, 2, 44, 0, 31, 1, 45, 0, 41, 0, 47, 0, 45, 0, 49, 0, 51, 2, 37, 0, 53, 0, 53, 0, 52, 0, 52, 0, 55, 0, 55, 0, 54, 0, 56, 0, 55, 1, 54, 0, 49, 0, 26, 0, 0, 0, 51, 0, 48, 1, 31, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=40]
shader = SubResource( 39 )
shader_param/LightPos1 = Vector3( 412.52, 100, 0 )
shader_param/LightPos2 = Vector3( 217.589, 500, 0 )

[sub_resource type="Theme" id=50]
default_font = ExtResource( 19 )

[sub_resource type="VisualShaderNodeColorConstant" id=51]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeInput" id=52]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeExpression" id=53]
size = Vector2( 544, 287 )
expression = "//output0 = vec3(SCREEN_PIXEL_SIZE*SCREEN_UV*1000.0f,0);
vec2 scrnCoord = SCREEN_PIXEL_SIZE.x*UV/SCREEN_PIXEL_SIZE;
vec2 center = SCREEN_PIXEL_SIZE.x*vec2(.5,.5)/SCREEN_PIXEL_SIZE;
float dist = distance(scrnCoord,center);
output0=dist;"

[sub_resource type="VisualShaderNodeScalarFunc" id=54]
function = 18

[sub_resource type="VisualShaderNodeScalarOp" id=55]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=57]
uniform_name = "C"

[sub_resource type="VisualShaderNodeScalarUniform" id=58]
uniform_name = "F"

[sub_resource type="VisualShader" id=59]
code = "shader_type canvas_item;
uniform float C;
uniform float F;



void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out2p1 = 1.000000;

// Expression:4
	float n_out4p0;
	n_out4p0 = 0.0;
	{
		//n_out4p0 = vec3(SCREEN_PIXEL_SIZE*SCREEN_UV*1000.0f,0);
		vec2 scrnCoord = SCREEN_PIXEL_SIZE.x*UV/SCREEN_PIXEL_SIZE;
		vec2 center = SCREEN_PIXEL_SIZE.x*vec2(.5,.5)/SCREEN_PIXEL_SIZE;
		float dist = distance(scrnCoord,center);
		n_out4p0=dist;
	}

// ScalarUniform:8
	float n_out8p0 = C;

// ScalarOp:6
	float n_out6p0 = n_out4p0 - n_out8p0;

// ScalarUniform:9
	float n_out9p0 = F;

// ScalarOp:7
	float n_out7p0 = n_out6p0 * n_out9p0;

// ScalarFunc:5
	float n_out5p0 = min(max(n_out7p0, 0.0), 1.0);

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -701, 61.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 580, 120 )
nodes/fragment/2/node = SubResource( 51 )
nodes/fragment/2/position = Vector2( -80, 60 )
nodes/fragment/3/node = SubResource( 52 )
nodes/fragment/3/position = Vector2( -340, 100 )
nodes/fragment/4/node = SubResource( 53 )
nodes/fragment/4/position = Vector2( -1140, 220 )
nodes/fragment/4/size = Vector2( 544, 287 )
nodes/fragment/4/input_ports = ""
nodes/fragment/4/output_ports = "0,0,output0;"
nodes/fragment/4/expression = "//output0 = vec3(SCREEN_PIXEL_SIZE*SCREEN_UV*1000.0f,0);
vec2 scrnCoord = SCREEN_PIXEL_SIZE.x*UV/SCREEN_PIXEL_SIZE;
vec2 center = SCREEN_PIXEL_SIZE.x*vec2(.5,.5)/SCREEN_PIXEL_SIZE;
float dist = distance(scrnCoord,center);
output0=dist;"
nodes/fragment/5/node = SubResource( 54 )
nodes/fragment/5/position = Vector2( 80, 260 )
nodes/fragment/6/node = SubResource( 55 )
nodes/fragment/6/position = Vector2( -280, 280 )
nodes/fragment/7/node = SubResource( 56 )
nodes/fragment/7/position = Vector2( -100, 360 )
nodes/fragment/8/node = SubResource( 57 )
nodes/fragment/8/position = Vector2( -520, 360 )
nodes/fragment/9/node = SubResource( 58 )
nodes/fragment/9/position = Vector2( -340, 473 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 6, 0, 6, 0, 7, 0, 7, 0, 5, 0, 8, 0, 6, 1, 9, 0, 7, 1, 5, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=60]
shader = SubResource( 59 )
shader_param/C = 0.0
shader_param/F = 9000.0

[node name="MainMenuScene" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Background" type="TextureRect" parent="."]
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CenterContainer" type="CenterContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -768.0
margin_top = -432.0
margin_right = 768.0
margin_bottom = 432.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Torch1" type="AnimatedSprite" parent="CenterContainer"]
show_behind_parent = true
position = Vector2( 238.851, 361.357 )
scale = Vector2( 4, 4 )
frames = SubResource( 41 )
animation = "Flicker"
speed_scale = 2.0
playing = true

[node name="Torch2" type="AnimatedSprite" parent="CenterContainer"]
show_behind_parent = true
position = Vector2( 1279.44, 361.357 )
scale = Vector2( 4, 4 )
frames = SubResource( 41 )
animation = "Flicker"
frame = 4
speed_scale = 2.0
playing = true

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 40 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )
script = ExtResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Logo" type="TextureRect" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -400.0
margin_top = -301.0
margin_right = 400.0
margin_bottom = -119.0
rect_min_size = Vector2( 800, 159.092 )
texture = ExtResource( 2 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="StartButton" type="TextureButton" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -108.0
margin_top = -79.0
margin_right = 103.0
margin_bottom = -4.0
size_flags_horizontal = 4
size_flags_vertical = 4
texture_normal = ExtResource( 18 )
texture_pressed = ExtResource( 21 )
texture_hover = ExtResource( 20 )
expand = true
script = ExtResource( 24 )
__meta__ = {
"_edit_use_anchors_": false
}
hoverStream = ExtResource( 23 )
clickStream = ExtResource( 22 )
fadeInAudio = ExtResource( 25 )
fadeOutAudio = ExtResource( 26 )

[node name="Label" type="Label" parent="StartButton"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 9.0
margin_right = 10.0
margin_bottom = 9.0
theme = SubResource( 50 )
custom_colors/font_color = Color( 0.376471, 0.423529, 0.439216, 1 )
text = "START"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="StartButton"]

[node name="FadeAudioPlayer" type="AudioStreamPlayer" parent="StartButton"]
volume_db = -7.255

[node name="Github" type="TextureButton" parent="."]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -81.0
margin_top = -73.0
margin_right = -17.0
margin_bottom = -9.0
texture_normal = ExtResource( 13 )
texture_pressed = ExtResource( 11 )
texture_hover = ExtResource( 12 )
script = ExtResource( 17 )
__meta__ = {
"_edit_use_anchors_": false
}
url = "https://github.com/cmacmillan/Godotlunky"
hoverStream = ExtResource( 23 )
clickStream = ExtResource( 22 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="Github"]

[node name="Itch" type="TextureButton" parent="."]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -159.0
margin_top = -73.0
margin_right = -92.0
margin_bottom = -9.0
texture_normal = ExtResource( 14 )
texture_pressed = ExtResource( 16 )
texture_hover = ExtResource( 15 )
script = ExtResource( 17 )
__meta__ = {
"_edit_use_anchors_": false
}
url = "https://cha5m.itch.io/godolunky"
hoverStream = ExtResource( 23 )
clickStream = ExtResource( 22 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="Itch"]

[node name="FullscreenWipe" type="ColorRect" parent="."]
material = SubResource( 60 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="mouse_entered" from="StartButton" to="StartButton" method="_on_mouse_entered"]
[connection signal="pressed" from="StartButton" to="StartButton" method="OnButtonPressed"]
[connection signal="mouse_entered" from="Github" to="Github" method="_on_mouse_entered"]
[connection signal="pressed" from="Github" to="Github" method="OnButtonPressed"]
[connection signal="mouse_entered" from="Itch" to="Itch" method="_on_mouse_entered"]
[connection signal="pressed" from="Itch" to="Itch" method="OnButtonPressed"]
